
#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"КонтрагентСоздан()","КонтрагентСоздан","Тогда контрагент создан","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УдалитьКонтрагента(Парам01)","УдалитьКонтрагента","Тогда удалить контрагента ""ИНН""","","");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Тогда контрагент создан
//@КонтрагентСоздан()
Процедура КонтрагентСоздан(Парам01)Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение "Не реализовано.";
	
	Если Не КонтрагентЗаписан(Парам01) Тогда 
		ВызватьИсключение("Контрагент не создан в БД");
	КонецЕсли;
КонецПроцедуры


&НаСервере
//Удаляет элемент справочника Контрагенты по ИНН
Процедура УдалитьКонтрагентаНаСервере(ИНН)

	Попытка
		Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИНН,,);
		Контрагент.ПолучитьОбъект().Удалить();
	
	Исключение
		ВызватьИсключение("Не удалось удалить контрагента с ИНН:"+ИНН);
	КонецПопытки;
	
КонецПроцедуры
 

&НаСервере
//Проверяет наличие элемента справочника Контрагенты по ИНН
Функция КонтрагентЗаписан(ИНН)
	
	Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИНН,,);
	
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда 
		Возврат Ложь;
	Иначе 
		//Контрагент.ПолучитьОбъект().Удалить();
		Возврат Истина;
	КонецЕсли;

КонецФункции // КонтрагентЗаписан()
 

&НаКлиенте
//Тогда удалить контрагента "ИНН"
//@УдалитьКонтрагента(Парам01)
Процедура УдалитьКонтрагента(Парам01) Экспорт
	УдалитьКонтрагентаНаСервере(Парам01);
КонецПроцедуры
