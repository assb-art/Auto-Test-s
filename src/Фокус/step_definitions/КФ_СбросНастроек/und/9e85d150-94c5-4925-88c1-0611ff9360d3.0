{3,
{46,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,1,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},0,"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0,100,1,1,0},"
#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ОчиститьНастройкиКФ()"",""ОчиститьНастройкиКФ"",""Когда Очистить настройки КФ"","""","""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""НастройкиКФОчищены()"",""НастройкиКФОчищены"",""Тогда настройки КФ очищены"","""","""");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Когда Очистить настройки КФ
//@ОчиститьНастройкиКФ()
Процедура ОчиститьНастройкиКФ() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение ""Не реализовано."";
	ОчиститьНаСервере();
КонецПроцедуры

&НаКлиенте
//Тогда настройки КФ очищены
//@НастройкиКФОчищены()
Процедура НастройкиКФОчищены() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//Если ЕстьДобавленныеОбъекты() Тогда
	//	ВызватьИсключение ""Настройки не очищены"";
	//КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере()
	
	Если ЕстьДобавленныеОбъекты() Тогда
		
		РЗ = РегистрыСведений.Фокус_ДополнительныеРеквизиты.СоздатьНаборЗаписей();
		РЗ.Записать();
		
	Иначе 
		Возврат;
	КонецЕсли;
	
	ХранилищеСистемныхНастроек.Удалить(""КонтурФокус_ПервыйЗапуск"",,);
	ХранилищеСистемныхНастроек.Удалить(""КонтурФокус_КлючДоступа"",,);
	ХранилищеСистемныхНастроек.Удалить(""КонтурФокус_НастроенныеСпискиКонтрагентов"",,);
	ХранилищеСистемныхНастроек.Удалить(""КонтурФокус_ПараметрыПочты"",,);
	ХранилищеСистемныхНастроек.Удалить(""КонтурФокус_ГраницаЗеленыхМаркеров"",,);
	ХранилищеСистемныхНастроек.Удалить(""КонтурФокус_ГраницаЖелтыхМаркеров"",,);
	ХранилищеСистемныхНастроек.Удалить(""КонтурФокус_ГраницаКрасныхМаркеров"",,);
	ХранилищеСистемныхНастроек.Удалить(""КонтурФокус_Маркеры"",,);
	ХранилищеСистемныхНастроек.Удалить(""КонтурФокус_НастройкиПрокси"",,);
	
	Списки = Справочники.Фокус_СписокКонтрагентов.Выбрать();
	
	Пока Списки.Следующий() Цикл
		Списки.ПолучитьОбъект().Удалить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьДобавленныеОбъекты() Экспорт
	
	ЕстьДобавленныеОбъекты = ЕстьНеобходимыеМетаданные(""Справочники.Фокус_СписокКонтрагентов"") И 
							ЕстьНеобходимыеМетаданные(""РегистрыСведений.Фокус_ОтветыСервера"") И 
							ЕстьНеобходимыеМетаданные(""РегистрыСведений.Фокус_ИсторияМаркеров"") И 
	   						ЕстьНеобходимыеМетаданные(""РегистрыСведений.Фокус_ДополнительныеРеквизиты"");
	 
	Возврат ЕстьДобавленныеОбъекты;
	
КонецФункции 

&НаСервере
Функция ЕстьНеобходимыеМетаданные(СтрокаМетаданных) Экспорт
	
	ТекПолеМетаданных = Метаданные;
	
	МассивИмен = Контур_РазложитьСтрокуВМассивСлов(СтрокаМетаданных, ""."");

	КоличествоИмен = МассивИмен.Количество();
		
	Если НЕ (КоличествоИмен = 2 ИЛИ КоличествоИмен = 4 ИЛИ КоличествоИмен = 6) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоПоисков = КоличествоИмен/2;
	Для н = 1 По КоличествоПоисков Цикл
		ТекПолеМетаданных = ТекПолеМетаданных[МассивИмен[н*2-2]].Найти(МассивИмен[н*2-1]);
		Если ТекПолеМетаданных = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции

&НаСервере
Функция Контур_РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов = "","") Экспорт
	
	Слова = Новый Массив;
	
	Для Сч = 1 По СтрДлина(РазделителиСлов) Цикл
		Строка = СтрЗаменить(Строка, Сред(РазделителиСлов, Сч, 1),Символы.ПС);
	КонецЦикла;
	
	Для Сч = 1 По СтрЧислоСтрок(Строка) Цикл
		ТекСлово = СокрЛП(СтрПолучитьСтроку(Строка, Сч));
		Если ТекСлово<>"""" Тогда
			Слова.Добавить(ТекСлово);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Слова;
	
КонецФункции

	",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",503de865-4645-4496-b5dd-2e4a76236095}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,0},
{0,0},
{0,0},
{0,0},0,0}